Mysql Database Test3

						Count

SELECT * from Orders;

Result =>       # Order_ID   Order_Num           Person_ID
		1	111	 	1
		2	222		2
		3	777		3
		4	555		1
		5	666		2
		6	666		3
		7	777		3

Output => 3	26	20:10:07	select * from Orders
 LIMIT 0, 1000	7 row(s) returned	0.000 sec / 0.000 sec


SELECT * from Orders Group by Person_ID;

Result =>  # Order_ID   Order_Num           Person_ID
		1	111	 	1
		2	222		2
		3	777		3

Output => 3	27	20:10:07	select * from Orders Group by Person_ID
 LIMIT 0, 1000	3 row(s) returned	0.015 sec / 0.000 sec


SELECT *, count(*) from Orders group by Person_ID;

Result =>          # Order_ID  Order_Num       Person_ID
		1	111		1
		2	222		2
		3	777		3

Output => 3	25	20:03:40	select *, count(*) from Orders group by Person_ID
 LIMIT 0, 1000	3 row(s) returned	0.000 sec / 0.000 sec


SELECT *, count(*) from Orders group by Person_ID having Person_ID = 2;

Result =>         # Order_ID      Order_Num        Person_ID	          count(*)
		2	      222		  2		2

Output =>  3	27	20:10:07	select * from Orders Group by Person_ID
 LIMIT 0, 1000	3 row(s) returned	0.015 sec / 0.000 sec


SELECT * from Orders limit 4;

Result =>        # Order_ID	Order_Num	Person_ID
		1	      111		1
		2	      222		2
		3	      777		3
		4	      555		1

Output => 3	31	00:25:13	select * from Orders limit 5	5 row(s) returned	0.000 sec / 0.000 sec


						MySQL WHERE Clause


SELECT * from Orders where Order_ID =1;

Result =>        # Order_ID	Order_Num	Person_ID
		1	      111		1

Output => 3	35	00:31:48	SELECT * from Orders where Order_ID =1
 LIMIT 0, 1000	1 row(s) returned	0.000 sec / 0.000 sec



						MySQL WHERE Clause with AND condition


SELECT * from Orders where Order_ID > 2 and Person_ID >= 3;


Result => 	# Order_ID        Order_Num	        Person_ID
		3		777		3
		6		666		3
		7		777		3

Output => 3	57	00:41:41	SELECT * from Orders where Order_ID > 2 and Person_ID >= 3
 LIMIT 0, 1000	3 row(s) returned	0.000 sec / 0.000 sec



						WHERE Clause with OR condition


SELECT * from Orders where Order_ID = 1 OR Person_ID = 1;

Result => 	# Order_ID        Order_Num	        Person_ID
		       1	                  111	    	1
		       4	                  555		1

Output => 3	9	00:45:44	SELECT * from Orders where Order_ID = 1 OR Person_ID = 1
 LIMIT 0, 1000	2 row(s) returned	0.031 sec / 0.000 sec



						MySQL WHERE Clause with combination of AND & OR conditions



SELECT * from Orders where (Order_ID > 2 and Person_ID > 2) or Order_Num = 111;

Result =>  # Order_ID	Order_Num	Person_ID
		1	111		1
		3	777		3
		6	666		3
		7	777		3

Output => 3	22	00:52:14	SELECT * from Orders where Order_ID > 2 and Person_ID > 3 or Order_Num = 111
 LIMIT 0, 1000	1 row(s) returned	0.000 sec / 0.000 sec



						MySQL Distinct Clause


SELECT distinct Person_ID from Orders;
 
Result => # Person_ID
	1
	2
	3

Output => 3	27	00:58:06	SELECT distinct Person_ID from Orders
 LIMIT 0, 1000	3 row(s) returned	0.000 sec / 0.000 sec 



						MySQL ORDER BY: without using ASC/DESC attribute



SELECT * from Orders Order by Person_ID asc;

Result => 
# Order_ID	Order_Num	Person_ID
	1	111		1
	4	555		1
	2	222		2
	5	666		2
	3	777		3
	6	666		3
	7	777		3

Output => 3	37	01:03:14	SELECT * from Orders Order by Person_ID asc
 LIMIT 0, 1000	7 row(s) returned	0.000 sec / 0.000 sec

SELECT * from Orders Order by Person_ID desc;

Result => 
        # Order_ID   Order_Num	Person_ID
	3	777		3
	6	666		3
	7	777		3
	2	222		2
	5	666		2
	1	111		1
	4	555		1

Output => 3	41	01:03:48	SELECT * from Orders Order by Person_ID desc
 LIMIT 0, 1000	7 row(s) returned	0.000 sec / 0.000 sec


SELECT * from Orders where Person_ID < 2 order by Person_ID;

Result => 
# Order_ID	Order_Num	Person_ID
	1	111		1
	4	555		1

Output => 3	45	01:07:35	SELECT * from Orders where Person_ID < 2 order by Person_ID
 LIMIT 0, 1000	2 row(s) returned	0.000 sec / 0.000 sec


SELECT * from Orders where Person_ID < 3 order by Order_Num;

Result => 
# Order_ID	Order_Num	Person_ID
	1	111		1
	2	222		2
	4	555		1
	5	666		2

Output =>  3	52	01:10:00	SELECT * from Orders where Person_ID < 3 order by Order_Num
 LIMIT 0, 1000	4 row(s) returned	0.000 sec / 0.000 sec




						MySQL GROUP BY Clause with SUM function


SELECT *, sum(Person_ID) from Orders group by Person_ID;

Result => 
# Order_ID	Order_Num	Person_ID	sum(Person_ID)
	1	111		1		2
	2	222		2		4
	3	777		3		9

Output => 3	56	01:13:56	select *, sum(Person_ID) from Orders group by Person_ID
 LIMIT 0, 1000	3 row(s) returned	0.016 sec / 0.000 sec


SELECT *, sum(Order_Num) from Orders group by Person_ID;

Result =>  
# Order_ID	Order_Num	Person_ID	sum(Order_Num)
	1	111		1		666
	2	222		2		888
	3	777		3		2220	

Output =>  3	61	01:16:52	select *, sum(Order_Num) from Orders group by Person_ID
 LIMIT 0, 1000	3 row(s) returned	0.000 sec / 0.000 sec


SELECT *, min(Order_Num) from Orders group by Person_ID;

Result =>  
# Order_ID	Order_Num	Person_ID	min(Order_Num)
	1	111		1		111
	2	222		2		222
	3	777		3		666

Output => 3	71	01:20:04	SELECT *, min(Order_Num) from Orders group by Person_ID
 LIMIT 0, 1000	3 row(s) returned	0.000 sec / 0.000 sec



						
						MySQL GROUP BY Clause with MIN function


SELECT *, min(Order_Num) as Minimum_Order_num from Orders group by Person_ID;

Result =>  
# Order_ID	Order_Num	Person_ID	Minimum_Order_num
	1	111		1		111
	2	222		2		222
	3	777		3		666

Output => 3	75	01:22:27	SELECT *, min(Order_Num) as Minimum_Order_num from Orders group by Person_ID
 LIMIT 0, 1000	3 row(s) returned	0.000 sec / 0.000 sec




						MySQL GROUP BY Clause with MAX function


SELECT *, max(Order_Num) as Max_Order_num from Orders group by Person_ID;

Result =>  # Order_ID	Order_Num	Person_ID	Max_Order_num
		1	111		1		555
		2	222		2		666
		3	777		3		777

Output => 3	79	01:24:15	SELECT *, max(Order_Num) as Max_Order_num from Orders group by Person_ID
 LIMIT 0, 1000	3 row(s) returned	0.000 sec / 0.000 sec




						MySQL GROUP BY Clause with AVG function


SELECT *, Avg(Order_Num) as avg_Order_num from Orders group by Person_ID;

Result => 
# Order_ID	Order_Num	Person_ID	avg_Order_num
	1	111		1		333.0000
	2	222		2		444.0000
	3	777		3		740.0000

Output => 3	83	01:26:00	SELECT *, Avg(Order_Num) as avg_Order_num from Orders group by Person_ID
 LIMIT 0, 1000	3 row(s) returned	0.000 sec / 0.000 sec





						HAVING Clause with SUM function

SELECT *, sum(Order_Num) from Orders where Person_ID >= 2 group by Person_ID having Order_Num >= 222;

Result => 
# Order_ID	Order_Num	Person_ID	sum(Order_Num)
	2	222		2		888
	3	777		3		2220

Output => 3	92	01:34:30	SELECT *, sum(Order_Num) from Orders where Person_ID >= 2 group by Person_ID having Order_Num >= 222
 LIMIT 0, 1000	2 row(s) returned	0.000 sec / 0.000 sec







